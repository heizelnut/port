#!/bin/sh

. ./.env

ENTRYSRC=${ENTRYSRC:-"$(find $SOURCEPATH | grep 'Main\.java')"}
ENTRYCLS=${ENTRYCLS:-"$(find $CLASSPATH | grep 'Main\.class')"}

JARFILES="$(find $LIBPATH | grep '\.jar$')"
for jar in $JARFILES
do
	INCLUDES="$INCLUDES:$jar"
done

ENTRYCLS=${ENTRYCLS##\./}
ENTRYCLS=${ENTRYCLS%%.class}

MANIFEST=${MANIFEST:-manifest.txt}

VERBOSE=${VERBOSE:-yes}

ilog() {
	printf " -> %s\n" "$1"
}

dlog() {
	printf "(+) %s\n" "$1"
}

wlog() {
	printf "(!) %s\n" "$1"
}

elog() {
	printf "(x) %s\n" "$1"
}

info() {
	[ "$VERBOSE" = 'yes' ] && {
		ilog "Project path: $PROJECTPATH"
		ilog "Package name: $PKGNAME"
		ilog "Source path: $SOURCEPATH"
		ilog "Class path: $CLASSPATH"
		ilog "Jar libs path: $LIBPATH"
		ilog "Entry file: $ENTRYSRC"
		ilog "Entry class: $ENTRYCLS"
		ilog "Libraries: $JARFILES"
	}
}

usage() {
	echo "USAGE:"
	echo "  $0 build    Generate .class files"
	echo "  $0 run      Run from the entry point"
	echo "  $0 clean    Remove .class files from work tree"
	echo "  $0 bundle   Generate a .jar file to deploy"
	echo "  $0 info     Show relevant environment variables"
}

run() {
	cd "$CLASSPATH"
	java -cp "$INCLUDES" "$PKGNAME.Main" $@
	cd ..
}

clean() {
	rm -r $CLASSPATH/*
}

bundle() {
	jar cfm "$PKGNAME.jar" "$MANIFEST" -C "$CLASSPATH" "$PKGNAME" $@ && \
		ilog "Output file: $PKGNAME.jar" && dlog "Done." || \
		elog "Run a build before a bundle."
}

manifest() {
	printf "" > $MANIFEST
	printf "Package-Name: %s\n" $PKGNAME >> $MANIFEST
	printf "Main-Class: %s.Main\n" $PKGNAME >> $MANIFEST
	printf "Class-path: " >> $MANIFEST
	for inc in "$(printf $INCLUDES | sed 's/:/ /')"
	do
		printf "$LIBPATH/$(basename $inc) " >> $MANIFEST
	done
	printf "\n\n" >> $MANIFEST
}

build() {
	manifest

	files="$(find $SOURCEPATH | grep '\.java$')"
	
	for f in $files
	do
		ilog "$f"
	done

	javac -cp "$INCLUDES" -d "$CLASSPATH" $@ $files && \
		dlog "All went good." || elog "There was an error."
}

[ "$1" = "run" ] && shift 1 && run $@ && exit
[ "$1" = "build" ] && shift 1 && build $@ && exit
[ "$1" = "clean" ] && clean && exit
[ "$1" = "bundle" ] && shift 1 && bundle $@ && exit
[ "$1" = "info" ] && info && exit

usage
